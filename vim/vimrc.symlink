"*****************************************************************************
"" NeoBundle core
"*****************************************************************************

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

let neobundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')

if !filereadable(neobundle_readme)
  echo "Installing NeoBundle..."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'


"*****************************************************************************
"" NeoBundle install packages
"*****************************************************************************
NeoBundle 'bling/vim-airline'
NeoBundle 'gtags/gtags'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'vim-scripts/grep.vim'

NeoBundle 'Shougo/vimproc.vim', {
    \ 'build' : {
    \     'windows': 'tools\\update-dll-mingw',
    \     'cygwin':  'make -f make_cygwin.mak',
    \     'mac':     'make -f make_mac.mak',
    \     'unix':    'make -f make_unix.mak',
    \    },
    \ }

"" Git
NeoBundle 'airblade/vim-gitgutter'
set updatetime=1

"" Color
NeoBundle 'tomasr/molokai'

"" C Lang Bundle
NeoBundle 'vim-scripts/c.vim'

"" Go Lang Bundle
NeoBundle 'majutsushi/tagbar'
NeoBundle 'fatih/vim-go'
let g:go_disable_autoinstall = 1

"" HTML Bundle
NeoBundle 'amirh/HTML-AutoCloseTag'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'groenewege/vim-less'
NeoBundle 'gorodinskiy/vim-coloresque'
let syntastic_mode_map = { 'passive_filetypes': ['html'] }

"" Javascript Bundle
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'leafgarland/typescript-vim'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'mxw/vim-jsx'
NeoBundle 'mustache/vim-mustache-handlebars'

"" JSON
NeoBundle 'elzr/vim-json'
set conceallevel=0
let g:vim_json_syntax_conceal = 0

"" Python Bundle
NeoBundle 'davidhalter/jedi-vim'
NeoBundle 'majutsushi/tagbar'

call neobundle#end()

" Required:
filetype plugin indent on


"*****************************************************************************
"" Basic Setup
"*****************************************************************************"
"" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set nobomb
set ttyfast

"" Fix backspace indent
set backspace=indent,eol,start

"" Allow plugins by file type
filetype on
filetype plugin on

"" Tabs. May be overriten by autocmd rules
set tabstop=2
set shiftwidth=2
set expandtab

"" Automatic line break
set tw=0

"" Yank record number
set viminfo='20,\"10000

"" Map leader to ,
let mapleader = ','

"" Enable hidden buffers
set hidden

"" Searching
set hlsearch
set incsearch
set noignorecase
set smartcase
set wrapscan

"" Directories for swp files
set nobackup
set noswapfile

set fileformats=unix,dos,mac
set showcmd
set shell=/bin/sh


"*****************************************************************************
"" Visual Settigns
"*****************************************************************************
set noerrorbells visualbell t_vb=
syntax on
""colorscheme desert

set ruler
set number
set display=lastline

let no_buffers_menu=1
highlight BadWhitespace ctermbg=red guibg=red
colorscheme molokai

set mousemodel=popup
set t_Co=256
set nocursorline
set guioptions=egmrti
set gfn=Monospace\ 8

if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h12
    set transparency=7
  endif
else
  let g:CSApprox_loaded = 1

  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif
endif

if &term =~ '256color'
  set t_ut=
endif

"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3

"" Status bar
set laststatus=2

"" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)}

" vim-airline
let g:airline#extensions#branch#enabled       = 1
let g:airline#extensions#syntastic#enabled    = 1
let g:airline#extensions#tabline#enabled      = 1
let g:airline#extensions#tabline#left_sep     = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'


"*****************************************************************************
"" Abbreviations
"*****************************************************************************
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

"" NERDTree configuration
let g:NERDTreeChDirMode            = 2
let g:NERDTreeIgnore               = ['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeMapOpenInTabSilent   = '<RightMouse>'
let g:NERDTreeSortOrder            = ['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks        = 1
let g:NERDTreeWinSize              = 20
let g:nerdtree_tabs_focus_on_files = 1

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
noremap <F3> :NERDTreeToggle<CR>

" grep.vim
nnoremap <silent> <leader>f :Rgrep<CR>
let Grep_Default_Options = '-IR'


"*****************************************************************************
"" Completion
"*****************************************************************************
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern          = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default':  '',
		\ 'c':        $HOME.'/.vim/dict/c.dict',
		\ 'cpp':      $HOME.'/.vim/dict/cpp.dict',
		\ 'java':     $HOME.'/.vim/dict/java.dict',
		\ 'scala':    $HOME.'/.vim/dict/scala.dict',
    \ 'vimshell': $HOME.'/.vimshell_hist',
    \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'


"*****************************************************************************
"" Functions
"*****************************************************************************
function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=0
endfunction

function TrimWhiteSpace()
    let @* = line(".")
    %s/\s*$//e
    ''
endfunction


"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************
"" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart

"" Remember cursor position
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

"" txt
au BufRead,BufNewFile *.txt call s:setupWrapping()

"" make/cmake
au FileType make set noexpandtab
autocmd BufNewFile,BufRead CMakeLists.txt setlocal ft=cmake

set autoread


"*****************************************************************************
"" Mappings
"*****************************************************************************
"" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

"" Git
noremap <Leader>ga :!git add .<CR>
noremap <Leader>gc :!git commit -m '<C-R>="'"<CR>
noremap <Leader>gsh :!git push<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

"" ctrlp.vim
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
noremap <Leader>b :CtrlPBuffer<CR>
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|tox)$'
let g:ctrlp_map           = ',e'
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_user_command  = "find %s -type f | grep -Ev '"+ g:ctrlp_custom_ignore +"'"
let g:ctrlp_use_caching   = 0

"" gtags
map <C-h> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
map <C-n> :cn<CR>
map <C-p> :cp<CR>

" snippets
let g:UltiSnipsEditSplit           = "vertical"
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<c-b>"

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list            = 1
let g:syntastic_aggregate_errors         = 1

"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Tagbar
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_type_go   = {
    \ 'ctagstype': 'go',
    \ 'kinds':     [
        \ 'c:constants',
        \ 'e:embedded',
        \ 'f:functions',
        \ 'i:imports:1',
        \ 'm:methods',
        \ 'n:interfaces',
        \ 'p:package',
        \ 'r:constructor',
        \ 't:types',
        \ 'v:variables',
        \ 'w:fields'
    \ ],
    \ 'sro':        '.',
    \ 'kind2scope': {'t': 'ctype', 'n': 'ntype'},
    \ 'scope2kind': {'ctype': 't', 'ntype': 'n'},
    \ 'ctagsbin':   'gotags',
    \ 'ctagsargs':  '-sort -silent'
    \ }

let g:javascript_enable_domhtmlcss = 1

"" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
